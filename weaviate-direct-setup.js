const WEAVIATE_URL = process.env.WEAVIATE_URL;
const WEAVIATE_APIKEY = process.env.WEAVIATE_APIKEY;

console.log("Setting up Weaviate with direct REST API...");

// Function to make authenticated requests to Weaviate
async function weaviateRequest(endpoint, method = 'GET', body = null) {
  const url = `${WEAVIATE_URL}${endpoint}`;
  const options = {
    method,
    headers: {
      'Authorization': `Bearer ${WEAVIATE_APIKEY}`,
      'Content-Type': 'application/json'
    }
  };
  
  if (body) {
    options.body = JSON.stringify(body);
  }
  
  const response = await fetch(url, options);
  
  if (!response.ok) {
    const errorText = await response.text();
    throw new Error(`Weaviate request failed: ${response.status} - ${errorText}`);
  }
  
  return response.json();
}

async function setupSchema() {
  try {
    console.log("Checking if Vocabulary class exists...");
    
    // Check existing schema
    const schema = await weaviateRequest('/v1/schema');
    const vocabularyClass = schema.classes?.find(c => c.class === 'Vocabulary');
    
    if (vocabularyClass) {
      console.log("‚úÖ Vocabulary class already exists");
      return true;
    }
    
    console.log("Creating Vocabulary class...");
    
    // Create the class
    const classDefinition = {
      class: "Vocabulary",
      description: "Arabic-German vocabulary for language learning",
      properties: [
        {
          name: "arabic",
          dataType: ["text"],
          description: "Arabic word or phrase"
        },
        {
          name: "german",
          dataType: ["text"], 
          description: "German translation"
        }
      ]
    };
    
    await weaviateRequest('/v1/schema', 'POST', classDefinition);
    console.log("‚úÖ Vocabulary class created successfully");
    return true;
    
  } catch (error) {
    console.error("Schema setup failed:", error.message);
    return false;
  }
}

async function importVocabulary() {
  const vocabularyData = [
    { arabic: "ÿßŸÑÿ≥ŸÑÿßŸÖ", german: "der Frieden" },
    { arabic: "ÿπŸÑŸäŸÉŸÖ", german: "auf euch" },
    { arabic: "ŸÖÿ±ÿ≠ÿ®ÿß", german: "willkommen" },
    { arabic: "ÿ¥ŸÉÿ±ÿß", german: "danke" },
    { arabic: "ÿßŸÑŸÑŸá", german: "Allah/Gott" },
    { arabic: "ŸÖÿ≠ŸÖÿØ", german: "Mohammed" },
    { arabic: "ÿßŸÑŸÇÿ±ÿ¢ŸÜ", german: "der Koran" },
    { arabic: "ÿßŸÑÿµŸÑÿßÿ©", german: "das Gebet" },
    { arabic: "ÿßŸÑŸÖÿ≥ÿ¨ÿØ", german: "die Moschee" },
    { arabic: "ÿßŸÑÿ≠ŸÖÿØ", german: "das Lob" },
    { arabic: "ŸÑŸÑŸá", german: "f√ºr Allah" },
    { arabic: "ÿ±ÿ®", german: "Herr" },
    { arabic: "ÿßŸÑÿπÿßŸÑŸÖŸäŸÜ", german: "der Welten" },
    { arabic: "ÿßŸÑÿ±ÿ≠ŸÖŸÜ", german: "der Barmherzige" },
    { arabic: "ÿßŸÑÿ±ÿ≠ŸäŸÖ", german: "der Gn√§dige" },
    { arabic: "ŸÖŸÑŸÉ", german: "K√∂nig" },
    { arabic: "ŸäŸàŸÖ", german: "Tag" },
    { arabic: "ÿßŸÑÿØŸäŸÜ", german: "die Religion" },
    { arabic: "ÿ•ŸäÿßŸÉ", german: "dir allein" },
    { arabic: "ŸÜÿπÿ®ÿØ", german: "wir dienen" },
    { arabic: "ŸÜÿ≥ÿ™ÿπŸäŸÜ", german: "wir bitten um Hilfe" },
    { arabic: "ÿßŸáÿØŸÜÿß", german: "f√ºhre uns" },
    { arabic: "ÿßŸÑÿµÿ±ÿßÿ∑", german: "der Weg" },
    { arabic: "ÿßŸÑŸÖÿ≥ÿ™ŸÇŸäŸÖ", german: "der gerade" },
    { arabic: "ÿµÿ±ÿßÿ∑", german: "Weg" },
    { arabic: "ÿßŸÑÿ∞ŸäŸÜ", german: "diejenigen" },
    { arabic: "ÿ£ŸÜÿπŸÖÿ™", german: "du begnadet hast" },
    { arabic: "ÿπŸÑŸäŸáŸÖ", german: "√ºber sie" },
    { arabic: "ÿ∫Ÿäÿ±", german: "nicht" },
    { arabic: "ÿßŸÑŸÖÿ∫ÿ∂Ÿàÿ®", german: "die Erz√ºrnten" },
    { arabic: "ÿßŸÑÿ∂ÿßŸÑŸäŸÜ", german: "die Irrenden" },
    { arabic: "ÿ¢ŸÖŸäŸÜ", german: "Amen" },
    { arabic: "ÿ®ÿ≥ŸÖ", german: "im Namen" },
    { arabic: "ŸÉÿ™ÿßÿ®", german: "Buch" },
    { arabic: "ŸÇÿ±ÿ£", german: "lesen" },
    { arabic: "ŸÉÿ™ÿ®", german: "schreiben" },
    { arabic: "ÿØÿ±ÿ≥", german: "Lektion" },
    { arabic: "ÿ∑ÿßŸÑÿ®", german: "Student" },
    { arabic: "ŸÖÿπŸÑŸÖ", german: "Lehrer" },
    { arabic: "ŸÖÿØÿ±ÿ≥ÿ©", german: "Schule" },
    { arabic: "ÿ¨ÿßŸÖÿπÿ©", german: "Universit√§t" },
    { arabic: "ÿ®Ÿäÿ™", german: "Haus" },
    { arabic: "ÿ®ÿßÿ®", german: "T√ºr" },
    { arabic: "ŸÜÿßŸÅÿ∞ÿ©", german: "Fenster" },
    { arabic: "ÿ∑ÿßŸàŸÑÿ©", german: "Tisch" },
    { arabic: "ŸÉÿ±ÿ≥Ÿä", german: "Stuhl" },
    { arabic: "ÿ≥ÿ±Ÿäÿ±", german: "Bett" },
    { arabic: "ŸÖÿ∑ÿ®ÿÆ", german: "K√ºche" },
    { arabic: "ÿ≠ŸÖÿßŸÖ", german: "Badezimmer" },
    { arabic: "ŸÖÿßÿ°", german: "Wasser" },
    { arabic: "ÿ∑ÿπÿßŸÖ", german: "Essen" },
    { arabic: "ÿÆÿ®ÿ≤", german: "Brot" },
    { arabic: "ŸÑÿ≠ŸÖ", german: "Fleisch" },
    { arabic: "ÿ≥ŸÖŸÉ", german: "Fisch" },
    { arabic: "ŸÅÿßŸÉŸáÿ©", german: "Obst" },
    { arabic: "ÿÆÿ∂ÿßÿ±", german: "Gem√ºse" },
    { arabic: "ÿ≠ŸÑŸäÿ®", german: "Milch" },
    { arabic: "ÿ¥ÿßŸä", german: "Tee" },
    { arabic: "ŸÇŸáŸàÿ©", german: "Kaffee" },
    { arabic: "ÿπÿµŸäÿ±", german: "Saft" },
    { arabic: "ÿ±ÿ¨ŸÑ", german: "Mann" },
    { arabic: "ÿßŸÖÿ±ÿ£ÿ©", german: "Frau" },
    { arabic: "ŸàŸÑÿØ", german: "Junge" },
    { arabic: "ÿ®ŸÜÿ™", german: "M√§dchen" },
    { arabic: "ÿ£ÿ®", german: "Vater" },
    { arabic: "ÿ£ŸÖ", german: "Mutter" },
    { arabic: "ÿ£ÿÆ", german: "Bruder" },
    { arabic: "ÿ£ÿÆÿ™", german: "Schwester" },
    { arabic: "ÿßÿ®ŸÜ", german: "Sohn" },
    { arabic: "ÿßÿ®ŸÜÿ©", german: "Tochter" },
    { arabic: "ÿ¨ÿØ", german: "Gro√üvater" },
    { arabic: "ÿ¨ÿØÿ©", german: "Gro√ümutter" },
    { arabic: "ÿπŸÖ", german: "Onkel (v√§terlicherseits)" },
    { arabic: "ÿπŸÖÿ©", german: "Tante (v√§terlicherseits)" },
    { arabic: "ÿÆÿßŸÑ", german: "Onkel (m√ºtterlicherseits)" },
    { arabic: "ÿÆÿßŸÑÿ©", german: "Tante (m√ºtterlicherseits)" },
    { arabic: "ÿµÿØŸäŸÇ", german: "Freund" },
    { arabic: "ÿ¨ÿßÿ±", german: "Nachbar" },
    { arabic: "Ÿàÿßÿ≠ÿØ", german: "eins" },
    { arabic: "ÿßÿ´ŸÜÿßŸÜ", german: "zwei" },
    { arabic: "ÿ´ŸÑÿßÿ´ÿ©", german: "drei" },
    { arabic: "ÿ£ÿ±ÿ®ÿπÿ©", german: "vier" },
    { arabic: "ÿÆŸÖÿ≥ÿ©", german: "f√ºnf" },
    { arabic: "ÿ≥ÿ™ÿ©", german: "sechs" },
    { arabic: "ÿ≥ÿ®ÿπÿ©", german: "sieben" },
    { arabic: "ÿ´ŸÖÿßŸÜŸäÿ©", german: "acht" },
    { arabic: "ÿ™ÿ≥ÿπÿ©", german: "neun" },
    { arabic: "ÿπÿ¥ÿ±ÿ©", german: "zehn" },
    { arabic: "ÿµÿ®ÿßÿ≠", german: "Morgen" },
    { arabic: "ŸÖÿ≥ÿßÿ°", german: "Abend" },
    { arabic: "ŸÑŸäŸÑ", german: "Nacht" },
    { arabic: "ŸÜŸáÿßÿ±", german: "Tag (Tageslicht)" },
    { arabic: "ÿ¥ŸÖÿ≥", german: "Sonne" },
    { arabic: "ŸÇŸÖÿ±", german: "Mond" },
    { arabic: "ŸÜÿ¨ŸÖ", german: "Stern" },
    { arabic: "ÿ≥ŸÖÿßÿ°", german: "Himmel" },
    { arabic: "ÿ£ÿ±ÿ∂", german: "Erde" },
    { arabic: "ÿ®ÿ≠ÿ±", german: "Meer" },
    { arabic: "ŸÜŸáÿ±", german: "Fluss" },
    { arabic: "ÿ¨ÿ®ŸÑ", german: "Berg" },
    { arabic: "ÿ¥ÿ¨ÿ±", german: "Baum" },
    { arabic: "Ÿàÿ±ÿØ", german: "Rose" },
    { arabic: "ÿ≠ÿØŸäŸÇÿ©", german: "Garten" },
    { arabic: "ÿ≠ŸäŸàÿßŸÜ", german: "Tier" },
    { arabic: "ŸÇÿ∑", german: "Katze" },
    { arabic: "ŸÉŸÑÿ®", german: "Hund" },
    { arabic: "ÿ≠ÿµÿßŸÜ", german: "Pferd" },
    { arabic: "ÿ∑Ÿäÿ±", german: "Vogel" }
  ];

  console.log(`Starting import of ${vocabularyData.length} vocabulary entries...`);
  
  let successful = 0;
  let failed = 0;
  
  for (const vocab of vocabularyData) {
    try {
      await weaviateRequest('/v1/objects', 'POST', {
        class: 'Vocabulary',
        properties: vocab
      });
      
      successful++;
      console.log(`‚úì ${vocab.arabic} ‚Üí ${vocab.german}`);
    } catch (error) {
      failed++;
      console.error(`‚úó Failed: ${vocab.arabic} - ${error.message}`);
    }
  }
  
  console.log(`\n‚úÖ Import complete: ${successful} successful, ${failed} failed`);
  return successful > 0;
}

async function main() {
  try {
    const schemaReady = await setupSchema();
    if (!schemaReady) {
      console.error("‚ùå Schema setup failed, cannot proceed with import");
      process.exit(1);
    }
    
    const importSuccess = await importVocabulary();
    if (!importSuccess) {
      console.error("‚ùå Vocabulary import failed");
      process.exit(1);
    }
    
    console.log("üéâ Weaviate database is ready for translations!");
    
  } catch (error) {
    console.error("Setup failed:", error);
    process.exit(1);
  }
}

main();